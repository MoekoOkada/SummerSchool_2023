---
title: Homoeologous Expression Analysis
author: Moeko Okada
format: revealjs
---

## Commands/ scripts are available on GitHub

[https://github.com/MoekoOkada/SummerSchool_2023](https://github.com/MoekoOkada/SummerSchool_2023)

! When you copy the scripts, please copy from the GitHub page, not from this HTML file!


## Today's Plan

::: {style="font-size: 0.8em"}

1. Data download
2. Quality control
3. Homoeologous Mapping
4. Read sorting by EAGLE-RC
5. Read count
   1. read count
   2. make a count matrix
6. Expression analysis
   1. Differential expression analysis
   2. Clustering
   3. Homoeolog ratio test

:::

## RNA-seq workflow review

- Sequencing
- Quality control
- Mapping/ Alignment
- Read count
- Estimate Expression level
  - Differential expression analysis
  - Functional Analyses
  - etc...

## Expression analysis in polyploids

![KK Shimizu (2022) Curr. Opin. Plant Biol. ](./photos/HomoeologousExpression.jpeg)

## RNA-seq workflow review

- Sequencing
- Quality control
- **Homoeologous Mapping/ Alignment**
- **Read classification**
- Read count
- Estimate Expression level
  - Differential expression analysis
  - Functional Analyses
  - etc...

## What you need to use EAGLE-RC

- Reference genome sequence
- NGS reads (DNA-seq, RNA-seq, methylome)
- Gene annotation file (gtf, gff)

## Today's sample

***Arabidopsis kamchatica***

<br>

- Accession: murodo
- RNA from root
- Control and zinc treatment for 48h
- 3 replicates for each condition

![](./photos/kam.jpg){.absolute top=50 right=50 width=30%}


::: aside
https://www.bg.s.u-tokyo.ac.jp/nikko-old/5_jokyo/species/Arabidopsis_kamchatica.html
:::

## Today's Plan

::: {style="font-size: 0.8em"}

1. Data download
2. Quality control
3. Homoeologous Mapping
4. Read sorting by EAGLE-RC
5. Read count
   1. read count
   2. make a count matrix
6. Expression analysis
   1. Differential expression analysis
   2. Clustering
   3. Homoeolog ratio test

:::

## JFYI...

:::{style="font-size: 0.8em"}

- Lines with `$` mean commands you use.
  - If you want to copy and paste, exclude `$`.


- I put the name of the directory you should be before `$`.
  - If you are not there, please run the `cd` command


- Lines without `$` mean standard output on the terminal.

:::

```bash
$ cd src
src $ pwd
/tmp/eagle/work/polyploid-rna-seq-analyses/src
src $
```

## 1. Data download

Error messages may appear during extraction, but just ignore them!

<br>

#### 1-1. Download genome data

```bash
$ cd src
src $ wget -O genome.tar.gz https://drive.switch.ch/index.php/s/ZQzcTZ5lGJEcCbA/download
src $ ls
genome.tar.gz  scripts
src $ tar xvzf genome.tar.gz
src $ ls
genome  genome.tar.gz  scripts
src $
```

## 1. Data download

<br>

#### 1-2. Download raw sequence data

```bash
src $ wget -O fastq.tar.gz https://drive.switch.ch/index.php/s/0ny11xweoA5WhEX/download
src $ ls
fastq.tar.gz  genome  genome.tar.gz  scripts
src $ tar xvzf fastq.tar.gz
src $ ls
fastq  fastq.tar.gz  genome  genome.tar.gz  scripts
src $ ls fastq
MUR_1_R1_ds.fastq.gz  MUR_3_R1_ds.fastq.gz       MUR_R48h_2_R1_ds.fastq.gz  trimmomatic_adapters.txt
MUR_2_R1_ds.fastq.gz  MUR_R48h_1_R1_ds.fastq.gz  MUR_R48h_3_R1_ds.fastq.gz
src $
```

## 2. Quality control

Trimmomatic ([Bolger et al. _Bioinformatics_ 2014.](https://academic.oup.com/bioinformatics/article/30/15/2114/2390096>))

- Remove sequencer-specific adapter sequence
- Remove low-quality reads (Q < 30)
- Remove too short reads (< 40)
- Use only reads passed the criteria

## 2. Quality control

Use shell script `1_qc.sh` to run Trimmomatics for all data.

```shell
#!/bin/sh
# 1_qc.sh
# Project: SummerSchool
# Date: 4-Jul-2023
# Author: Moeko Okada

mkdir 1_qc
cd fastq/

for i in `ls *_R1_ds.fastq.gz`; do
  f=`basename ${i} _R1_ds.fastq.gz`
  echo "# start ${f} " $(date)

  trimmomatic SE -phred33 -threads 2 \
    ${i} ../1_qc/${f}_ds_clean.fastq.gz \
    ILLUMINACLIP:trimmomatic_adapters.txt:2:30:10 \
    SLIDINGWINDOW:4:30 MINLEN:40

  echo "# done ${f} " $(date)
done
```

## 2. Quality control

Make sure you are in the `src` directory.

```bash
src $ bash scripts/1_qc.sh
src $
```

<br>

:::{style="font-size : 0.8em"}

You will get 4 `.fastq.gz` files in

`/tmp/eagle/work/polyploid-rna-seq-analyses/src/1_qc`

:::

## 3. Homoeologous Mapping

:::{style="font-size:0.8em"}

For read classification by EAGLE-RC, reads should be mapped to each subgenome respectively.
:::

![](./photos/sorting.png){.absolute right=300 height="60%"}

::: aside
Kuo et al. _Brief. Bioinfom_ 2020
:::

## Mapping software

:::{style="font-size:0.7em"}

- BWA (DNA reads to genome sequence) ([Li and Durbin _Bioinformatics_ 2009.](https://academic.oup.com/bioinformatics/article/25/14/1754/225615))
- **HISAT2** (RNA/DNA reads to genome sequence) ([Kim et al. _Nat. Biotech._ 2019.](https://www.nature.com/articles/s41587-019-0201-4))
- bowtie2 (RNA reads to transcriptome sequence) ([Kim et al. _Nat. Method_ 2015](https://www.nature.com/articles/nmeth.3317))
- STAR (DNA/RNA to genome sequence) ([Dobin et al. _Bioinformatics_ 2013](https://academic.oup.com/bioinformatics/article/29/1/15/272537))

STAR is recommended to EAGLE-RC.

But today we will use HISAT2 because of the time and resource limitations.

<br>

###### Other required software

samtools ([Li et al. _Bioinfirmatics_ 2008.](https://academic.oup.com/bioinformatics/article/25/16/2078/204688))

:::

## 3. Homoeologous Mapping

Use shell script `2_map.sh` to run Trimmomatics for all data.

```shell
#!/bin/sh
# 2_map.sh
# Project: SummerSchool
# Date: 4-Jul-2023
# Author: Moeko Okada

mkdir 2_map
cd 1_qc/

for i in `ls *_ds_clean.fastq.gz`; do
  f=`basename ${i} _clean.fastq.gz`
  echo "# start ${f} " $(date)

  hisat2 -p 2 -x ../genome/Ahal_v2_2 -U ${i} | samtools view -SbF4 -q 40 - | samtools sort -m 8G -@ 2 -o ../2_map/${f}_hal.bam
  hisat2 -p 2 -x ../genome/Alyr_v2_2 -U ${i} | samtools view -SbF4 -q 40 - | samtools sort -m 8G -@ 2 -o ../2_map/${f}_lyr.bam
  samtools index ../2_map/${f}_hal.bam
  samtools index ../2_map/${f}_lyr.bam

  echo "# done ${f} " $(date)
done
```

## 3. Homoeologous Mapping

Make sure you are in the `src` directory.

```shell
src $ bash scripts/2_map.sh
src $
```

<br>

:::{style="font-size : 0.8em"}

You will get 4 `.bam` and 4 `.bam.bai` files in

`/tmp/eagle/work/polyploid-rna-seq-analyses/src/2_map`

:::

## 4. Read sorting by EAGLE-RC

:::{style="font-size:0.8em"}

EAGLE-RC ([Kuo et al. _Brief. Bioinfom_ 2020](https://academic.oup.com/bib/article/21/2/395/5251019))


- Normal mode
  - Requires gene annotation and homoeologous list
  - High accuracy
  - Takes a while
- NGI mode
  - Requires only reference genome info (fasta and .fai)
  - Low accuracy
  - Fast

:::

:::aside

https://github.com/tony-kuo/eagle

:::

## 4. Read sorting by EAGLE-RC

:::{style="font-size:0.9em"}

Today, we will use NGI mode.

<br>

Please take a look [github page](https://github.com/tony-kuo/eagle) for

- creating a homoeologous list
- how to run normal mode
- how to use eagle-rc for genotyping from DNA-seq data
- etc...

You may be required to install some software.

:::

:::aside

https://github.com/tony-kuo/eagle

:::

## 4. Read sorting by EAGLE-RC

Use shell script `3_eagle.sh` to run Trimmomatics for all data.

```shell
#!/bin/sh
# 3_eagle.sh
# Project: SummerSchool
# Date: 4-Jul-2023
# Author: Moeko Okada

mkdir 3_eagle
cd 2_map/

for i in `ls *_hal.bam`; do
  f=`basename ${i} _hal.bam`
  echo "# start ${f} " $(date)

  eagle-rc --ngi --ref1=../genome/Ahal_v2_2.fa --ref2=../genome/Alyr_v2_2.fa --bam1=../2_map/${i} --bam2=../2_map/${f}_lyr.bam -o ../3_eagle/${f}.eaglerc > ../3_eagle/${f}.eaglerc.stdout.log 2> ../3_eagle/${f}.eaglerc.errout.log

  echo "# done ${f} " $(date)
done
```

## 4. Read sorting by EAGLE-RC

Make sure you are in the `src` directory!

```bash
src $ bash scripts/3_eagle.sh
src $
```

## Output file of EAGLE-RC

:::{style="font-size:0.8em"}

- *.ref.bam: reads with the reference allele
- *.alt.bam: reads with the alternative allele
- *.unk.bam: ambiguous reads
- *.mul.bam: multi-allele reads (empty when we use NGI mode)

<br>

- eaglerc1: based on reference 1 (today's case: halleri genome)
- eaglerc2: based on reference 2 (today's case: lyrata genome)

To make it faster and simpler, we will use `*.eaglerc1.ref.bam` and `*.eaglerc1.alt.bam`.

:::

## 5-1. Count mapped read

featureCounts ([Liao et al. _Bioinformatics_ 2014.](https://academic.oup.com/bioinformatics/article/30/7/923/232889))

<br>

#### Requirements

- gene annotation (gtf file)
- mapped bam file

## 5-1. Count mapped read

Use shell script `4_count.sh` to run Trimmomatics for all data.

```shell
#!/bin/sh
# 4_count.sh
# Project: SummerSchool
# Date: 4-Jul-2023
# Author: Moeko Okada

mkdir 4_count
cd 3_eagle/

for i in `ls *.eaglerc1.ref.bam`; do
  f=`basename ${i} .eaglerc1.ref.bam`
  echo "# start ${f} " $(date)

  featureCounts -T 2 -t exon -g transcript_id -a ../genome/Ahal_v2_2.gtf -o ../4_count/${f}_hal_counts.txt ${i}
  featureCounts -T 2 -t exon -g transcript_id -a ../genome/Alyr_v2_2.gtf -o ../4_count/${f}_lyr_counts.txt ${f}.eaglerc2.ref.bam

  echo "# done ${f} " $(date)
done
```

## 5-1. Count mapped read

Make sure you are in the "src" directory.

```bash
src $ bash scripts/4_count.sh
src $
```

## 5-2. Make read count matrix

For further expression analysis, prepare a count matrix that looks like this.

:::{style="font-size:0.8em"}

|gene_id|MUR_1|MUR_2|MUR_3|MUR_1_48h|MUR_2_48h|MUR_3_48h|
|---|-----:|-----:|-----:|-----:|-----:|-----:|
|gene1|10|8|11|58|62|65|
|gene2|0|0|0|0|0|0|
|gene3|100|103|99|5|2|6|

:::

## 5-2. Make Expression table

Make sure you are in the `4_count` directory!

```bash
src $ cd 4_count
4_count $ (echo "gene_id";ls *_hal_counts.txt; ) | sed -e s/_hal_counts.txt//g | tr '\n' '_hal\t' | sed 's/\s*$//' > hal_counts.tsv
4_count $ (echo "gene_id";ls *_lyr_counts.txt; ) | sed -e s/_ds_lyr_counts.txt//g | tr '\n' '_lyr\t' | sed 's/\s*$//' > lyr_counts.tsv
4_count $ echo "" >> hal_counts.tsv
4_count $ echo "" >> lyr_counts.tsv
4_count $ python /tmp/eagle/scripts/tablize.py -skip 1 -a -i 0 -c 6 *_hal_counts.txt >> hal_counts.tsv
4_count $ python /tmp/eagle/scripts/tablize.py -skip 1 -a -i 0 -c 6 *_lyr_counts.txt >> lyr_counts.tsv
4_count $
```

<br>

## 6. Expression analysis

Use R for calculation and visualization.

Please move to the R console.

![](./photos/console.png)

<br>

Required package information is written in [install.R](https://github.com/MoekoOkada/SummerSchool_2023/blob/main/scripts/install.r).

## 6-1. Differential Expression Analysis

<br>

### Required libraries

```r
library(edgeR) # normalisation, deg detection
library(DESeq2) # normalisation, deg detection
library(dplyr) # data formatting
library(stringr) # data formatting
library(gplots) # plot heatmap
```

## 6-1. Differential Expression Analysis

<br>

### Load data

```r
## load count data
# set working directory
setwd("src/exp")

# load count data of halleri side
hal_count <- read.table("hal_counts.tsv", header = T, row.names = 1, sep = "\t")

# check hal count data
head(hal_count)

# load count data of lyrata side
lyr_count <- read.table("lyr_counts.tsv", header = T, row.names = 1, sep = "\t")

# check lyr count data
head(lyr_counr)
```

## 6-1. Differential Expression Analysis

<br>

### Data prep. for EAGLE-RC

1. Make a whole count matrix
2. Load the gene length info of halleri
3. calculate RPKM using DESeq2

## Data prep. for EAGLE-RC

```R
# bind count data
count <- cbind(hal_count, lyr_count) # cbind merges the two data frame based on rownames
# check data
head(count)

# load gene length of hal
Ahal_gtf <- read.table("../genome/Ahal_v2_2.gtf", header = F, sep = "\t")
Ahal_gtf <- filter(Ahal_gtf, V3 == "transcript") # extract transcript information
len <- Ahal_gtf$V5 - Ahal_gtf$V4 + 1 # define length based on start and end position of each gene

# Calculate RPKM
rpkm <- as.data.frame(rpkm(count, len, log = FALSE)) # rpkm function in DESeq2 package
table_rpkm <- as.data.frame(rpkm, n = nrow(count)) # convert to table
head(table_rpkm)
write.table(table_rpkm, file = paste0("homoeolog_RPKM.txt"), col.names = T, row.names = T, sep = "\t") # Output
```

## 6-1. Differential Expression Analysis

<br>

Make a count matrix for each condition (control and zinc) for expression analysis

<br>

```R
# Select function in dplyr package
control <- select(count, -contains("48h")) # Select columns without "48h"
head(control)
zinc <- select(count, contains("48h")) # Select columns with "48h"
head(zinc)
```

## 6-1. Differential Expression Analysis

### Expression analysis

Use edgeR to compare halleri side and kamchatica side under zinc treatment.

```R
# set groups
group <- factor(c("kam_hal", "kam_hal", "kam_hal", "kam_lyr", "kam_lyr", "kam_lyr"))
design <- model.matrix(~group)

# DEG detection from zinc-treated samples
d1 <- DGEList(counts = zinc, group = group)

# normalize according to UserGuide
d1 <- calcNormFactors(d1)
d1 <- estimateDisp(d1, design)

# plot Multi-dimensional scaling
plotMDS(d1)
```

## 6-1. Differential Expression Analysis

### MSD plot

![](./photos/mds.png)

## 6-2. Clustering and heatmap

First, format data to draw a heatmap.

```R
# calculate cpm and format it for heatmap
d2 <- cpm(d1, normalized.lib.size = TRUE)
scaledata <- t(scale(t(d2))) # Centers and scales data.
scaledata <- scaledata[complete.cases(scaledata), ]

# Change ids
rownames(scaledata) <- lapply(rownames(scaledata), gsub, pattern = ".t1", replacement = "")
```

## 6-2. Clustering and heatmap

<br>

### Extract metal-related genes from the expression table.

```R
# make a gene set
metal_genes <- read.table("metal_genes_ids.txt", sep = "\t", header = T)
metal_genes[, 4]

# Extract metal genes from deg files
my.geneset <- scaledata[rownames(scaledata) %in% metal_genes[, 4], ]
```

## 6-2. Clustering and heatmap

<br>

### Hierarchical clustering

```R
# clustering
hr <- hclust(as.dist(1 - cor(t(my.geneset), method = "pearson")), method = "complete")
hc <- hclust(as.dist(1 - cor(my.geneset, method = "spearman")), method = "complete")
```

## 6-2. Clustering and heatmap

<br>

Plot heatmap based on the clustering information.

Use the `heatmap.2` function in the `gplot` package.

```R
# Clustering of metal-related genes
png(paste0("Cluster_hm_zinc.png"))
heatmap.2(my.geneset,
  Rowv = as.dendrogram(hr),
  Colv = as.dendrogram(hc),
  col = colorRampPalette(c("blue", "yellow"))(100),
  scale = "row",
  cexCol = 0.7,
  main = "Heatmap.2",
  trace = "none"
)
dev.off()
```

## 6-2. Clustering and heatmap

<br>

### Heatmap

![](./photos/Cluster_hm_zinc.png)

## Advanced Excercise 1

<br>

How about the expression patterns of metal-related genes in control samples?

## Advanced Excercise 2

<br>

Compare expression between control and zinc condition.

## 6-3. Homoeologous Ratio Test

<br>

- Calculate expression ratio using R script provided by "HomeoRoq"
- Required files
  - RPKM matrix
  - label info
  - three R scripts

:::aside

[Akama et al. _Nucleic Acids Research_ 2014](https://academic.oup.com/nar/article/42/6/e46/2437554)

:::

## 6-3. Homoeologous Ratio Test

<br>

### label.txt

```t
"MUR_1_hal","MUR_1_lyr","MUR_R48h_1_hal","MUR_R48h_1_lyr"
"MUR_2_hal","MUR_2_lyr","MUR_R48h_2_hal","MUR_R48h_2_lyr"
"MUR_3_hal","MUR_3_lyr","MUR_R48h_3_hal","MUR_R48h_3_lyr"
```

## 6-3. Homoeologous Ratio Test

!! Go back to terminal!

![](./photos/start.png)

## 6-3. Homoeologous Ratio Test

<br>

### Make sure you are in the `scripts` directory.

```bash
$ cd src/scripts
scripts $ R --vanilla --slave --args ../exp/pval.txt ../exp/homoeolog_RPKM.txt label.txt < calcpval_one.R
```

## 6-3. Homoeologous Ratio Test

<br>

### Make sure you are in the `scripts` directory.

```bash
$ cd src/scripts
scripts $ R --vanilla --slave --args ../exp/pval.txt ../exp/homoeolog_RPKM.txt label.txt < calcpval_one.R
```

<br>

This process takes a while... How about a coffee break?

## 6-3. Homoeologous Ratio Test

<br>

### Plot homoeolog ratio

Make sure you are in the `exp` directory!

```bash
scripts $ cd ../exp
exp $ Rscript ../scripts/plot_homeoroq.R pval.txt MUR MUR_R48h
exp $
```

## 6-3. Homoeologous Ratio Test

<br>

### Plot homoeolog ratio

Make sure you are in the `exp` directory!

```bash
scripts $ cd ../exp
exp $ Rscript ../scripts/plot_homeoroq.R pval.txt MUR MUR_R48h
exp $
```

Now you got two pdf files.

- ratio_overdispersion: Scatterplot of the ratio of homeolog expression level between two conditions
- hist_overdispersion: Histogram of expression ratio
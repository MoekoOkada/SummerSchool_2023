install.packages("BiocManager")
BiocManager::install("SNPRelate")
## Load library
library(SNPRelate)
# set path for the vcf file
vcf.fn <- "/Users/okadamoeko/Dropbox/0_Git/UZH/03_PopGenNAM/reseq/vcf/Ath_snp_filt.vcf.gz"
# reformat vcf file
snpgdsVCF2GDS(vcf.fn, "test.gds", method = "biallelic.only")
# summary
snpgdsSummary("test.gds")
## PCA
genofile <- seqOpen("test.gds")
library(gdsfmt)
## PCA
genofile <- snpgdsOpen(snpgdsExampleFileName())
pca <- snpgdsPCA(genofile, snp.id = snpset.id, num.thread = 2)
View(genofile)
# reformat vcf file
snpgdsVCF2GDS(vcf.fn, "NAM_chr1A.gds", method = "biallelic.only")
# set path for the vcf file
vcf.fn <- "/Users/okadamoeko/Dropbox/0_Git/UZH/03_PopGenNAM/reseq/vcf/NAM_snp_filt.vcf.gz"
# reformat vcf file
snpgdsVCF2GDS(vcf.fn, "NAM_chr1A.gds", method = "biallelic.only")
# summary
snpgdsSummary("NAM_chr1A.gds")
## PCA
genofile <- openfn.gds("NAM_chr1A.gds")
pca <- snpgdsPCA(genofile)
closefn.gds(genofile)
# variance proportion (%)
pc.percent <- pca$varprop*100
percentages <- round(pc.percent, 2)
percentages
# make a data.frame
pca_df <- data.frame(sample.id = pca$sample.id, # make data frame
PC1 = pca$eigenvect[,1],   # 1st principal component
PC2 = pca$eigenvect[,2],   # 2nd principal component
PC3 = pca$eigenvect[,3],   # 3rd principal component
stringsAsFactors = FALSE)
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
text=~sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
library(ggplot2)
library(plotly)
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
text=~sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
View(pca_df)
library(dplyr)
pca_df <- mutate_all(pca_df, ~gsub(.,pattern=".chr1A_dedup.bam",replacement = ""))
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
text=~sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
text=~sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
pca_df <- mutate_all(pca_df, ~gsub(.,pattern=".chr1A_dedup.bam",replacement = ""))
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
text=~sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
head(pca_df)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
View(genofile)
View(pca)
## PC1 vs PC2
p1 <- autoplot(pca_df, data = pca_df, colour = 'sample.id', label = TRUE, label.size = 3)
## PC1 vs PC2
p1 <- autoplot(pca_df, data = pca, colour = 'sample.id', label = TRUE, label.size = 3)
## PC1 vs PC2
p1 <- autoplot(pca, data = pca, colour = 'sample.id', label = TRUE, label.size = 3)
## PC1 vs PC2
p1 <- ggplot(pca_df, aes(x=PC1, y=PC2)) +
geom_point(aes(colour=sample.id)) +
theme_bw()
p1
plot_ly(pca_df,
x=~PC1, y=~PC2,
text=~sample.id,
color =~ sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
pca_df <- mutate_all(pca_df, ~gsub(.,pattern=".chr1A_dedup.bam",replacement = ""))
# make a data.frame
pca_df <- data.frame(sample.id = pca$sample.id, # make data frame
PC1 = pca$eigenvect[,1],   # 1st principal component
PC2 = pca$eigenvect[,2],   # 2nd principal component
PC3 = pca$eigenvect[,3],   # 3rd principal component
stringsAsFactors = FALSE)
pca_df <- mutate_all(pca_df, ~gsub(.,pattern=".chr1A_dedup.bam",replacement = ""))
head(pca_df)
plot_ly(pca_df,
x=~PC1, y=~PC2,
text=~sample.id,
color =~ sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
pca <- mutate_all(pca, ~gsub(.,pattern=".chr1A_dedup.bam",replacement = ""))
# make a data.frame
pca_df <- data.frame(sample.id = pca$sample.id, # make data frame
PC1 = pca$eigenvect[,1],   # 1st principal component
PC2 = pca$eigenvect[,2],   # 2nd principal component
PC3 = pca$eigenvect[,3],   # 3rd principal component
stringsAsFactors = FALSE)
pca_df <- mutate_all(pca_df, ~gsub(.,pattern=".chr1A_dedup.bam",replacement = ""))
head(pca_df)
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
type = 'scatter',
text=~sample.id,
color =~ sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
type = 'scatter',
mode = 'markers'
text=~sample.id,
color =~ sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
# make a data.frame
pca_df <- data.frame(sample.id = pca$sample.id, # make data frame
PC1 = pca$eigenvect[,1],   # 1st principal component
PC2 = pca$eigenvect[,2],   # 2nd principal component
PC3 = pca$eigenvect[,3],   # 3rd principal component
stringsAsFactors = FALSE)
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
type = 'scatter',
mode = 'markers'
text=~sample.id,
color =~ sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
type = 'scatter',
mode = 'markers'
text=~sample.id,
color =~ sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
# make a data.frame
pca_df <- data.frame(sample.id = pca$sample.id, # make data frame
PC1 = pca$eigenvect[,1],   # 1st principal component
PC2 = pca$eigenvect[,2],   # 2nd principal component
PC3 = pca$eigenvect[,3],   # 3rd principal component
stringsAsFactors = FALSE)
head(pca_df)
pca_df <- mutate_all(pca_df, ~gsub(.,pattern=".chr1A_dedup.bam",replacement = ""))
head(pca_df)
pca_df <- data.frame(mutate_all(pca_df, ~gsub(.,pattern=".chr1A_dedup.bam",replacement = "")))
head(pca_df)
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
type = 'scatter',
mode = 'markers',
text=~sample.id,
color =~ sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
type = 'scatter',
mode = 'markers',
text=~sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
# make a data.frame
pca_df <- data.frame(sample.id = pca$sample.id, # make data frame
PC1 = pca$eigenvect[,1],   # 1st principal component
PC2 = pca$eigenvect[,2],   # 2nd principal component
PC3 = pca$eigenvect[,3],   # 3rd principal component
stringsAsFactors = FALSE)
## PC1 vs PC2
plot_ly(pca_df,
x=~PC1, y=~PC2,
type = 'scatter',
mode = 'markers',
text=~sample.id,
size=1) %>%
layout(xaxis=list(title=paste("PC1: ", percentages[1], "%", sep="")),
yaxis=list(title=paste("PC2: ", percentages[2], "%", sep="")))
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
## PC1 vs PC2
p1 <- ggplot(pca_df, aes(x=PC1,y=PC2,  label = sample.id))+
theme_classic()+
geom_hline(yintercept = 0,color="gray70")+
geom_vline(xintercept = 0,color="gray70")+
geom_point(aes(color=cluster),alpha=0.55,size=3)+
xlab(paste("PC1: ", percentages[1], "%", sep="")) +
ylab(paste("PC2: ", percentages[2], "%", sep="")) +
ggtitle("PCA Clusters from Hierarchical Clustering of Cars Data") +
geom_text_repel
## PC1 vs PC2
p1 <- ggplot(pca_df, aes(x=PC1,y=PC2,  label = sample.id))+
theme_classic()+
geom_hline(yintercept = 0,color="gray70")+
geom_vline(xintercept = 0,color="gray70")+
geom_point(aes(color=cluster),alpha=0.55,size=3)+
xlab(paste("PC1: ", percentages[1], "%", sep="")) +
ylab(paste("PC2: ", percentages[2], "%", sep="")) +
ggtitle("PCA Clusters from Hierarchical Clustering of Cars Data") +
geom_text_repel()
p1
## PC1 vs PC2
p1 <- ggplot(pca_df, aes(x=PC1,y=PC2,  label = sample.id))+
theme_classic()+
geom_hline(yintercept = 0,color="gray70")+
geom_vline(xintercept = 0,color="gray70")+
geom_point(aes(color=sample.id),alpha=0.55,size=3)+
xlab(paste("PC1: ", percentages[1], "%", sep="")) +
ylab(paste("PC2: ", percentages[2], "%", sep="")) +
ggtitle("PCA Clusters from Hierarchical Clustering of Cars Data") +
geom_text_repel()
p1
ggsave(p1, filename = "PC1vsPC2_NAMchr1A.png", dpi = 300)
# make a data.frame
pca_df <- data.frame(sample.id = pca$sample.id, # make data frame
PC1 = pca$eigenvect[,1],   # 1st principal component
PC2 = pca$eigenvect[,2],   # 2nd principal component
PC3 = pca$eigenvect[,3],   # 3rd principal component
stringsAsFactors = FALSE)
pca_df <- data.frame(mutate_all(pca_df, ~gsub(.,pattern=".chr1A_dedup.bam",replacement = "")))
head(pca_df)
## PC1 vs PC2
p1 <- ggplot(pca_df, aes(x=PC1,y=PC2,  label = sample.id))+
theme_classic()+
geom_hline(yintercept = 0,color="gray70")+
geom_vline(xintercept = 0,color="gray70")+
geom_point(aes(color=sample.id),alpha=0.55,size=3)+
xlab(paste("PC1: ", percentages[1], "%", sep="")) +
ylab(paste("PC2: ", percentages[2], "%", sep="")) +
geom_text_repel()
p1
head(pca_df)
## PC1 vs PC2
p1 <- ggplot(pca_df, aes(x=PC1,y=PC2,  label = sample.id))+
theme_classic()+
geom_hline(yintercept = 0,color="gray70")+
geom_vline(xintercept = 0,color="gray70")+
geom_point(aes(color=sample.id),alpha=0.55,size=3)+
xlab(paste("PC1: ", percentages[1], "%", sep="")) +
ylab(paste("PC2: ", percentages[2], "%", sep="")) +
geom_text_repel()
p1
install.packages("multcomp")
install.packages("cdata")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
version()
install.packages("languageserver")
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("sf")
q()
install.packages(locfit)
install.packages("locfit")
install.packages("doMC")
installed.packages()
install.packages(c("cdata", "cowplot", "ggplot2", "ggfortify", "ggrepel", "multcomp", "onemap", "SNPRelate", "vcfR"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
BiocManager::install("DESew2")
BiocManager::install("DESeq2")
install.packages("languageserver")
install.packages("tidyverse")
data <- read.table(args[1], header = T, sep = "\t")
install.packages("languageserver")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("cummeRbund")
install.packages(mygene)
install.packages("mygene")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("cummeRbund")
setwd("/Users/okadamoeko/Library/CloudStorage/Dropbox/0_Git/SummerSchool_2023/scripts/calcpval_one.R")
setwd("/Users/okadamoeko/Library/CloudStorage/Dropbox/0_Git/SummerSchool_2023/scripts")
library(locfit)
library(doMC)
registerDoMC(12)
source("calcpval.R")
cat("Loading\n") ##
outfile <- "pval.txt"
rawcount <- read.delim("/Users/okadamoeko/Library/CloudStorage/Dropbox/7_Lecture/Polyploid/tmp/count/homeolog_RPKM.txt", header = T)
head(rawcount)
mylabel <- read.table("label.txt", header = F, stringsAsFactors = F, sep = ",")
head(mylabel)
MINVALVAR <- 1.0e-5
# MINPSD=1.0e-1
# MINVALVAR=1.0e-5
MINPVAR <- 1.0e-2
cat("Initializing\n") ##
nrow(mylabel)
nRep <- nrow(mylabel)
labelAllRow <- c()
for (i in 1:nRep) {
for (k in c(1, 2)) {
mylabel[i, k]
labelAllRow <- c(labelAllRow, mylabel[i, k])
}
}
for (i in 1:nRep) {
for (k in c(3, 4)) {
labelAllRow <- c(labelAllRow, mylabel[i, k])
}
}
counts <- rawcount[, labelAllRow]
for (indexCols in list(c(1, 2), c(3, 4))) {
for (indexRep in 1:nRep) {
col1 <- mylabel[indexRep, indexCols[1]] # parent1-origin
col2 <- mylabel[indexRep, indexCols[2]] # parent2-origin
counts[, col1] <- ifelse(counts[, col1] < counts[, col2] * 0.01, counts[, col2] * 0.01, counts[, col1])
counts[, col2] <- ifelse(counts[, col2] < counts[, col1] * 0.01, counts[, col1] * 0.01, counts[, col2])
}
}
OCcolumns <- mylabel[, 1]
ACcolumns <- mylabel[, 2]
ODcolumns <- mylabel[, 3]
ADcolumns <- mylabel[, 4]
ORGcolumns <- c(OCcolumns, ODcolumns)
totalCounts <- counts[, ORGcolumns] + counts[, c(ACcolumns, ADcolumns)]
totalLoggeomeans <- rowMeans(log(totalCounts))
ORGscaledCounts <- exp(log(counts[, ORGcolumns]) - (log(totalCounts) - totalLoggeomeans))
ORGVarList <- apply(ORGscaledCounts, 1, var) * (length(ORGcolumns) - 1) / length(ORGcolumns)
ORGRatioList <- rowMeans(counts[, ORGcolumns] / totalCounts)
totalCounts <- counts[, ORGcolumns] + counts[, c(ACcolumns, ADcolumns)]
totalLoggeomeans <- rowMeans(log(totalCounts))
ORGscaledCounts <- exp(log(counts[, ORGcolumns]) - (log(totalCounts) - totalLoggeomeans))
ORGVarList <- apply(ORGscaledCounts, 1, var) * (length(ORGcolumns) - 1) / length(ORGcolumns)
ORGRatioList <- rowMeans(counts[, ORGcolumns] / totalCounts)
ORGRatioVarList <- apply(counts[, ORGcolumns] / totalCounts, 1, var) * (length(ORGcolumns) - 1) / length(ORGcolumns)
ORGRatioSDList <- sqrt(ORGRatioVarList)
ctrlCounts <- counts[, OCcolumns] + counts[, ACcolumns]
ctrlLoggeomeans <- rowMeans(log(ctrlCounts))
OCscaledCounts <- exp(log(counts[, OCcolumns]) - (log(ctrlCounts) - ctrlLoggeomeans))
OCVarList <- apply(OCscaledCounts, 1, var) * (length(OCcolumns) - 1) / length(OCcolumns)
OCRatioList <- rowMeans(counts[, OCcolumns] / ctrlCounts)
OCRatioVarList <- apply(counts[, OCcolumns] / ctrlCounts, 1, var) * (length(OCcolumns) - 1) / length(OCcolumns)
View(ctrlCounts)
View(mylabel)
View(OCscaledCounts)
View(ORGscaledCounts)
View(totalCounts)
View(rawcount)
View(ORGscaledCounts)
View(OCscaledCounts)
View(totalCounts)
View(ORGscaledCounts)
objCounts <- counts[, ODcolumns] + counts[, ADcolumns]
objLoggeomeans <- rowMeans(log(objCounts))
ODscaledCounts <- exp(log(counts[, ODcolumns]) - (log(objCounts) - objLoggeomeans))
ODVarList <- apply(ODscaledCounts, 1, var) * (length(ODcolumns) - 1) / length(ODcolumns)
ODRatioList <- rowMeans(counts[, ODcolumns] / objCounts)
ODRatioVarList <- apply(counts[, ODcolumns] / objCounts, 1, var) * (length(ODcolumns) - 1) / length(ODcolumns)
cat("Fitting\n")
finiteval <- is.finite(ORGVarList) & totalLoggeomeans > 0 & ORGVarList > 1.0e-10
fit <- locfit(log(ORGVarList[finiteval]) ~ lp(totalLoggeomeans[finiteval], ORGRatioList[finiteval], scale = T), family = "gaussian", maxk = 200)
geneList <- c()
step <- 200
lastnum <- nrow(rawcount)
sampleList <- 1:lastnum
repeatnum <- lastnum %/% step
rest <- lastnum %% step
if (rest > 0) repeatnum <- repeatnum + 1
# dopar
pvalListList <- foreach(i = 1:repeatnum) %dopar% { # length(sampleList)
firstnum <- (i - 1) * step + 1
termnum <- min(i * step, lastnum)
cat(
"Processing i=", i, "/", repeatnum,
" from ", firstnum, " to ", termnum, "\n"
)
sigChangeMH(firstnum:termnum, numSample = 10000, verbose = FALSE)
}
pvalList <- unlist(pvalListList)
gene <- as.character(rawcount[sampleList, "gene"])
ctrlFstCounts <- rowSums(rawcount[sampleList, OCcolumns])
ctrlSndCounts <- rowSums(rawcount[sampleList, ACcolumns])
objFstCounts <- rowSums(rawcount[sampleList, ODcolumns])
objSndCounts <- rowSums(rawcount[sampleList, ADcolumns])
cat("Perform Fisher's exact test\n")
pfisher <- sapply(1:length(sampleList), function(i) {
fisher.test(
matrix(
c(ctrlFstCounts[i], ctrlSndCounts[i], objFstCounts[i], objSndCounts[i]),
nrow = 2
)
)$p
})
cat("Perform Chisqr Test\n")
pchisqr <- sapply(1:length(sampleList), function(i) {
ifelse(
ctrlFstCounts[i] == 0 & ctrlSndCounts[i] == 0 &
objFstCounts[i] == 0 & objSndCounts[i] == 0,
1.0,
chisq.test(
matrix(
c(
ctrlFstCounts[i],
ctrlSndCounts[i],
objFstCounts[i],
objSndCounts[i]
),
nrow = 2
)
)$p.value
)
})
pvalRes <- data.frame(
gene = gene, pval = pvalList, padj = p.adjust(pvalList, "BH"),
ctrlFirst = ctrlFstCounts, ctrlSecond = ctrlSndCounts,
objFirst = objFstCounts, objSecond = objSndCounts,
ctrlRatio = ctrlFstCounts / (ctrlFstCounts + ctrlSndCounts),
objRatio = objFstCounts / (objFstCounts + objSndCounts),
ratioSD = ORGRatioSDList[sampleList],
fisher = pfisher, fisher.adj = p.adjust(pfisher, "BH"),
chisqr = pchisqr, chisqr.adj = p.adjust(pchisqr, "BH")
)
View(pvalListList)
head(pvalList$BH)
head(pvalList)
gene <- as.character(rawcount[sampleList, "gene"])
gene <- as.character(rawcount[sampleList, "gene"])
gene <- as.character(rawcount[sampleList])
?rowcount
??rowcount
rawcount[sampleList, "gene"]
rawcount[sampleList, OCcolumns]
View(rawcount)
gene <- as.character(rawcount[sampleList, colnames])
rowSums(rawcount[sampleList, OCcolumns]
)
pvalList <- unlist(pvalListList)
gene <- as.character(rawcount[sampleList, "gene"])
View(rawcount)
gene <- as.character(rawcount[sampleList, colnames(rawcount)])
pvalRes <- data.frame(
gene = gene, pval = pvalList, padj = p.adjust(pvalList, "BH"),
ctrlFirst = ctrlFstCounts, ctrlSecond = ctrlSndCounts,
objFirst = objFstCounts, objSecond = objSndCounts,
ctrlRatio = ctrlFstCounts / (ctrlFstCounts + ctrlSndCounts),
objRatio = objFstCounts / (objFstCounts + objSndCounts),
ratioSD = ORGRatioSDList[sampleList],
fisher = pfisher, fisher.adj = p.adjust(pfisher, "BH"),
chisqr = pchisqr, chisqr.adj = p.adjust(pchisqr, "BH")
)
head(ctrlFstCounts)
gene <- as.character(rawcount[sampleList, rownames(rawcount)])
rawcount <- read.delim("/Users/okadamoeko/Library/CloudStorage/Dropbox/7_Lecture/Polyploid/tmp/count/homeolog_RPKM.txt", header = T)
rawcount <- read.delim("/Users/okadamoeko/Library/CloudStorage/Dropbox/7_Lecture/Polyploid/tmp/count/homoeolog_RPKM.txt", header = T)
gene <- as.character(rawcount$gene)
View(rawcount)
rawcount <- rawcount[, -13]
head(rawcount)
gene <- as.character(rawcount[sampleList, "gene"])
gene <- as.character(rawcount$gene)
rawcount <- read.delim("/Users/okadamoeko/Library/CloudStorage/Dropbox/7_Lecture/Polyploid/tmp/count/homoeolog_RPKM.txt", header = T)
gene <- as.character(rawcount$gene)
rawcount <- rawcount[, -13]
head(rawcount)
pvalRes <- data.frame(
gene = gene, pval = pvalList, padj = p.adjust(pvalList, "BH"),
ctrlFirst = ctrlFstCounts, ctrlSecond = ctrlSndCounts,
objFirst = objFstCounts, objSecond = objSndCounts,
ctrlRatio = ctrlFstCounts / (ctrlFstCounts + ctrlSndCounts),
objRatio = objFstCounts / (objFstCounts + objSndCounts),
ratioSD = ORGRatioSDList[sampleList],
fisher = pfisher, fisher.adj = p.adjust(pfisher, "BH"),
chisqr = pchisqr, chisqr.adj = p.adjust(pchisqr, "BH")
)
write.table(pvalRes, file = outfile, sep = "\t", quote = F, row.names = F)
q()
